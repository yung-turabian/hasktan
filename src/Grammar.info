-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseHasquelito -> Expr                     (0)
	Expr -> let var '=' Expr in Expr                   (1)
	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp   (2)
	Expr -> if Expr then Expr else Expr                (3)
	Expr -> Expr "==" Expr                             (4)
	Expr -> Expr ">=" Expr                             (5)
	Expr -> Expr "<=" Expr                             (6)
	Expr -> Expr "/=" Expr                             (7)
	Expr -> Expr '>' Expr                              (8)
	Expr -> Expr '<' Expr                              (9)
	Expr -> Expr "&&" Expr                             (10)
	Expr -> Expr "||" Expr                             (11)
	Expr -> Expr ':' Expr                              (12)
	Expr -> Expr "++" Expr                             (13)
	Expr -> List                                       (14)
	Expr -> Juxt                                       (15)
	Juxt -> Juxt Atom                                  (16)
	Juxt -> quot Atom Atom                             (17)
	Juxt -> rem Atom Atom                              (18)
	Juxt -> '-' Atom                                   (19)
	Juxt -> Atom '+' Atom                              (20)
	Juxt -> Atom '-' Atom                              (21)
	Juxt -> Atom '*' Atom                              (22)
	Juxt -> Atom '/' Atom                              (23)
	Juxt -> Atom '^' Atom                              (24)
	Juxt -> Atom                                       (25)
	Atom -> '(' Expr ')'                               (26)
	Atom -> int                                        (27)
	Atom -> bool                                       (28)
	Atom -> float                                      (29)
	Atom -> var                                        (30)
	TypeExp -> PrimType                                (31)
	TypeExp -> TypeExp "->" TypeExp                    (32)
	TypeExp -> '(' TypeExp ')'                         (33)
	PrimType -> Bool                                   (34)
	PrimType -> Int                                    (35)
	PrimType -> Float                                  (36)
	List -> '[' ListMembers ']'                        (37)
	ListMembers ->                                     (38)
	ListMembers -> Atom                                (39)
	ListMembers -> Atom ',' ListMembers                (40)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	Int            { INT p }
	Bool           { BOOL p }
	Float          { FLOAT p }
	int            { INTVAL p $$ }
	float          { FLOATVAL p $$ }
	bool           { BOOLVAL p $$ }
	let            { LET p }
	in             { IN p }
	if             { IF p }
	then           { THEN p }
	else           { ELSE p }
	'\\'           { LAMBDA p }
	"->"           { ARROW p }
	"::"           { COLONS p }
	"&&"           { AND p }
	"||"           { OR p }
	'='            { BIND p }
	'+'            { PLUS p }
	'-'            { MINUS p }
	'*'            { TIMES p }
	'/'            { DIVIDE p }
	'^'            { POWER p }
	quot           { QUOT p }
	rem            { REM p }
	"=="           { EQUALS p }
	">="           { GTEQ p }
	"<="           { LTEQ p }
	"/="           { NOTEQ p }
	'>'            { GT' p }
	'<'            { LT' p }
	'('            { LPAREN p }
	')'            { RPAREN p }
	var            { VAR p $$ }
	'['            { LBRACK p }
	']'            { RBRACK p }
	':'            { COLON p }
	','            { COMMA p }
	"++"           { PLUSPLUS p }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseHasquelito rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Juxt            rules 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	Atom            rules 26, 27, 28, 29, 30
	TypeExp         rules 31, 32, 33
	PrimType        rules 34, 35, 36
	List            rule  37
	ListMembers     rules 38, 39, 40

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 3
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 1


	let            shift, and enter state 2


State 2

	Expr -> let . var '=' Expr in Expr                  (rule 1)

	var            shift, and enter state 42


State 3

	%start_parseHasquelito -> Expr .                    (rule 0)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	':'            shift, and enter state 40
	"++"           shift, and enter state 41
	%eof           accept


State 4

	Expr -> Juxt .                                      (rule 15)
	Juxt -> Juxt . Atom                                 (rule 16)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	in             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	"&&"           reduce using rule 15
	"||"           reduce using rule 15
	"=="           reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15
	"/="           reduce using rule 15
	'>'            reduce using rule 15
	'<'            reduce using rule 15
	'('            shift, and enter state 19
	')'            reduce using rule 15
	var            shift, and enter state 15
	':'            reduce using rule 15
	"++"           reduce using rule 15
	%eof           reduce using rule 15

	Atom           goto state 31

State 5

	Juxt -> Atom . '+' Atom                             (rule 20)
	Juxt -> Atom . '-' Atom                             (rule 21)
	Juxt -> Atom . '*' Atom                             (rule 22)
	Juxt -> Atom . '/' Atom                             (rule 23)
	Juxt -> Atom . '^' Atom                             (rule 24)
	Juxt -> Atom .                                      (rule 25)

	int            reduce using rule 25
	float          reduce using rule 25
	bool           reduce using rule 25
	in             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	"&&"           reduce using rule 25
	"||"           reduce using rule 25
	'+'            shift, and enter state 26
	'-'            shift, and enter state 27
	'*'            shift, and enter state 28
	'/'            shift, and enter state 29
	'^'            shift, and enter state 30
	"=="           reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"/="           reduce using rule 25
	'>'            reduce using rule 25
	'<'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	var            reduce using rule 25
	':'            reduce using rule 25
	"++"           reduce using rule 25
	%eof           reduce using rule 25


State 6

	Expr -> List .                                      (rule 14)

	in             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	"&&"           reduce using rule 14
	"||"           reduce using rule 14
	"=="           reduce using rule 14
	">="           reduce using rule 14
	"<="           reduce using rule 14
	"/="           reduce using rule 14
	'>'            reduce using rule 14
	'<'            reduce using rule 14
	')'            reduce using rule 14
	':'            reduce using rule 14
	"++"           reduce using rule 14
	%eof           reduce using rule 14


State 7

	Atom -> int .                                       (rule 27)

	int            reduce using rule 27
	float          reduce using rule 27
	bool           reduce using rule 27
	in             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	"&&"           reduce using rule 27
	"||"           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	"=="           reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"/="           reduce using rule 27
	'>'            reduce using rule 27
	'<'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	var            reduce using rule 27
	']'            reduce using rule 27
	':'            reduce using rule 27
	','            reduce using rule 27
	"++"           reduce using rule 27
	%eof           reduce using rule 27


State 8

	Atom -> float .                                     (rule 29)

	int            reduce using rule 29
	float          reduce using rule 29
	bool           reduce using rule 29
	in             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	"&&"           reduce using rule 29
	"||"           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	"=="           reduce using rule 29
	">="           reduce using rule 29
	"<="           reduce using rule 29
	"/="           reduce using rule 29
	'>'            reduce using rule 29
	'<'            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	var            reduce using rule 29
	']'            reduce using rule 29
	':'            reduce using rule 29
	','            reduce using rule 29
	"++"           reduce using rule 29
	%eof           reduce using rule 29


State 9

	Atom -> bool .                                      (rule 28)

	int            reduce using rule 28
	float          reduce using rule 28
	bool           reduce using rule 28
	in             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	"&&"           reduce using rule 28
	"||"           reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	"=="           reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"/="           reduce using rule 28
	'>'            reduce using rule 28
	'<'            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	var            reduce using rule 28
	']'            reduce using rule 28
	':'            reduce using rule 28
	','            reduce using rule 28
	"++"           reduce using rule 28
	%eof           reduce using rule 28


State 10

	Expr -> if . Expr then Expr else Expr               (rule 3)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 25
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 11

	Juxt -> '-' . Atom                                  (rule 19)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 24

State 12

	Juxt -> quot . Atom Atom                            (rule 17)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 23

State 13

	Juxt -> rem . Atom Atom                             (rule 18)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 22

State 14

	Expr -> '(' . '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 2)
	Atom -> '(' . Expr ')'                              (rule 26)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'\\'           shift, and enter state 21
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 20
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 15

	Atom -> var .                                       (rule 30)

	int            reduce using rule 30
	float          reduce using rule 30
	bool           reduce using rule 30
	in             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	"&&"           reduce using rule 30
	"||"           reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	"=="           reduce using rule 30
	">="           reduce using rule 30
	"<="           reduce using rule 30
	"/="           reduce using rule 30
	'>'            reduce using rule 30
	'<'            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	var            reduce using rule 30
	']'            reduce using rule 30
	':'            reduce using rule 30
	','            reduce using rule 30
	"++"           reduce using rule 30
	%eof           reduce using rule 30


State 16

	List -> '[' . ListMembers ']'                       (rule 37)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15
	']'            reduce using rule 38

	Atom           goto state 17
	ListMembers    goto state 18

State 17

	ListMembers -> Atom .                               (rule 39)
	ListMembers -> Atom . ',' ListMembers               (rule 40)

	']'            reduce using rule 39
	','            shift, and enter state 65


State 18

	List -> '[' ListMembers . ']'                       (rule 37)

	']'            shift, and enter state 64


State 19

	Atom -> '(' . Expr ')'                              (rule 26)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 20
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 20

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)
	Atom -> '(' Expr . ')'                              (rule 26)

	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            shift, and enter state 63
	':'            shift, and enter state 40
	"++"           shift, and enter state 41


State 21

	Expr -> '(' '\\' . var "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 2)

	var            shift, and enter state 62


State 22

	Juxt -> rem Atom . Atom                             (rule 18)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 61

State 23

	Juxt -> quot Atom . Atom                            (rule 17)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 60

State 24

	Juxt -> '-' Atom .                                  (rule 19)

	int            reduce using rule 19
	float          reduce using rule 19
	bool           reduce using rule 19
	in             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	"&&"           reduce using rule 19
	"||"           reduce using rule 19
	"=="           reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"/="           reduce using rule 19
	'>'            reduce using rule 19
	'<'            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	var            reduce using rule 19
	':'            reduce using rule 19
	"++"           reduce using rule 19
	%eof           reduce using rule 19


State 25

	Expr -> if Expr . then Expr else Expr               (rule 3)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	then           shift, and enter state 59
	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	':'            shift, and enter state 40
	"++"           shift, and enter state 41


State 26

	Juxt -> Atom '+' . Atom                             (rule 20)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 58

State 27

	Juxt -> Atom '-' . Atom                             (rule 21)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 57

State 28

	Juxt -> Atom '*' . Atom                             (rule 22)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 56

State 29

	Juxt -> Atom '/' . Atom                             (rule 23)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 55

State 30

	Juxt -> Atom '^' . Atom                             (rule 24)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15

	Atom           goto state 54

State 31

	Juxt -> Juxt Atom .                                 (rule 16)

	int            reduce using rule 16
	float          reduce using rule 16
	bool           reduce using rule 16
	in             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	"&&"           reduce using rule 16
	"||"           reduce using rule 16
	"=="           reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	"/="           reduce using rule 16
	'>'            reduce using rule 16
	'<'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	var            reduce using rule 16
	':'            reduce using rule 16
	"++"           reduce using rule 16
	%eof           reduce using rule 16


State 32

	Expr -> Expr "&&" . Expr                            (rule 10)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 53
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 33

	Expr -> Expr "||" . Expr                            (rule 11)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 52
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 34

	Expr -> Expr "==" . Expr                            (rule 4)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 51
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 35

	Expr -> Expr ">=" . Expr                            (rule 5)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 50
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 36

	Expr -> Expr "<=" . Expr                            (rule 6)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 49
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 37

	Expr -> Expr "/=" . Expr                            (rule 7)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 48
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 38

	Expr -> Expr '>' . Expr                             (rule 8)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 47
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 39

	Expr -> Expr '<' . Expr                             (rule 9)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 46
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 40

	Expr -> Expr ':' . Expr                             (rule 12)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 45
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 41

	Expr -> Expr "++" . Expr                            (rule 13)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 44
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 42

	Expr -> let var . '=' Expr in Expr                  (rule 1)

	'='            shift, and enter state 43


State 43

	Expr -> let var '=' . Expr in Expr                  (rule 1)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 69
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 44

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)
	Expr -> Expr "++" Expr .                            (rule 13)

	in             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            reduce using rule 13
	':'            shift, and enter state 40
	"++"           shift, and enter state 41
	%eof           reduce using rule 13


State 45

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr ':' Expr .                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            reduce using rule 12
	':'            shift, and enter state 40
	"++"           shift, and enter state 41
	%eof           reduce using rule 12


State 46

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr '<' Expr .                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	"&&"           reduce using rule 9
	"||"           reduce using rule 9
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 9
	':'            reduce using rule 9
	"++"           reduce using rule 9
	%eof           reduce using rule 9


State 47

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr '>' Expr .                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	"&&"           reduce using rule 8
	"||"           reduce using rule 8
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 8
	':'            reduce using rule 8
	"++"           reduce using rule 8
	%eof           reduce using rule 8


State 48

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr "/=" Expr .                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	"&&"           reduce using rule 7
	"||"           reduce using rule 7
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 7
	':'            reduce using rule 7
	"++"           reduce using rule 7
	%eof           reduce using rule 7


State 49

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr "<=" Expr .                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	"&&"           reduce using rule 6
	"||"           reduce using rule 6
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 6
	':'            reduce using rule 6
	"++"           reduce using rule 6
	%eof           reduce using rule 6


State 50

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr ">=" Expr .                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	"&&"           reduce using rule 5
	"||"           reduce using rule 5
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 5
	':'            reduce using rule 5
	"++"           reduce using rule 5
	%eof           reduce using rule 5


State 51

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr "==" Expr .                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	"&&"           reduce using rule 4
	"||"           reduce using rule 4
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 4
	':'            reduce using rule 4
	"++"           reduce using rule 4
	%eof           reduce using rule 4


State 52

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr "||" Expr .                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	"&&"           fail
	"||"           fail
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            reduce using rule 11
	':'            reduce using rule 11
	"++"           reduce using rule 11
	%eof           reduce using rule 11


State 53

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr "&&" Expr .                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	"&&"           fail
	"||"           fail
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            reduce using rule 10
	':'            reduce using rule 10
	"++"           reduce using rule 10
	%eof           reduce using rule 10


State 54

	Juxt -> Atom '^' Atom .                             (rule 24)

	int            reduce using rule 24
	float          reduce using rule 24
	bool           reduce using rule 24
	in             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	"&&"           reduce using rule 24
	"||"           reduce using rule 24
	"=="           reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"/="           reduce using rule 24
	'>'            reduce using rule 24
	'<'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	var            reduce using rule 24
	':'            reduce using rule 24
	"++"           reduce using rule 24
	%eof           reduce using rule 24


State 55

	Juxt -> Atom '/' Atom .                             (rule 23)

	int            reduce using rule 23
	float          reduce using rule 23
	bool           reduce using rule 23
	in             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	"&&"           reduce using rule 23
	"||"           reduce using rule 23
	"=="           reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"/="           reduce using rule 23
	'>'            reduce using rule 23
	'<'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	var            reduce using rule 23
	':'            reduce using rule 23
	"++"           reduce using rule 23
	%eof           reduce using rule 23


State 56

	Juxt -> Atom '*' Atom .                             (rule 22)

	int            reduce using rule 22
	float          reduce using rule 22
	bool           reduce using rule 22
	in             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	"&&"           reduce using rule 22
	"||"           reduce using rule 22
	"=="           reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"/="           reduce using rule 22
	'>'            reduce using rule 22
	'<'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	var            reduce using rule 22
	':'            reduce using rule 22
	"++"           reduce using rule 22
	%eof           reduce using rule 22


State 57

	Juxt -> Atom '-' Atom .                             (rule 21)

	int            reduce using rule 21
	float          reduce using rule 21
	bool           reduce using rule 21
	in             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	"&&"           reduce using rule 21
	"||"           reduce using rule 21
	"=="           reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"/="           reduce using rule 21
	'>'            reduce using rule 21
	'<'            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	var            reduce using rule 21
	':'            reduce using rule 21
	"++"           reduce using rule 21
	%eof           reduce using rule 21


State 58

	Juxt -> Atom '+' Atom .                             (rule 20)

	int            reduce using rule 20
	float          reduce using rule 20
	bool           reduce using rule 20
	in             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	"&&"           reduce using rule 20
	"||"           reduce using rule 20
	"=="           reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"/="           reduce using rule 20
	'>'            reduce using rule 20
	'<'            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	var            reduce using rule 20
	':'            reduce using rule 20
	"++"           reduce using rule 20
	%eof           reduce using rule 20


State 59

	Expr -> if Expr then . Expr else Expr               (rule 3)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 68
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 60

	Juxt -> quot Atom Atom .                            (rule 17)

	int            reduce using rule 17
	float          reduce using rule 17
	bool           reduce using rule 17
	in             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	"&&"           reduce using rule 17
	"||"           reduce using rule 17
	"=="           reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"/="           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	var            reduce using rule 17
	':'            reduce using rule 17
	"++"           reduce using rule 17
	%eof           reduce using rule 17


State 61

	Juxt -> rem Atom Atom .                             (rule 18)

	int            reduce using rule 18
	float          reduce using rule 18
	bool           reduce using rule 18
	in             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	"&&"           reduce using rule 18
	"||"           reduce using rule 18
	"=="           reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"/="           reduce using rule 18
	'>'            reduce using rule 18
	'<'            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	var            reduce using rule 18
	':'            reduce using rule 18
	"++"           reduce using rule 18
	%eof           reduce using rule 18


State 62

	Expr -> '(' '\\' var . "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 2)

	"->"           shift, and enter state 67


State 63

	Atom -> '(' Expr ')' .                              (rule 26)

	int            reduce using rule 26
	float          reduce using rule 26
	bool           reduce using rule 26
	in             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	"&&"           reduce using rule 26
	"||"           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	"=="           reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"/="           reduce using rule 26
	'>'            reduce using rule 26
	'<'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	var            reduce using rule 26
	']'            reduce using rule 26
	':'            reduce using rule 26
	','            reduce using rule 26
	"++"           reduce using rule 26
	%eof           reduce using rule 26


State 64

	List -> '[' ListMembers ']' .                       (rule 37)

	in             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	"&&"           reduce using rule 37
	"||"           reduce using rule 37
	"=="           reduce using rule 37
	">="           reduce using rule 37
	"<="           reduce using rule 37
	"/="           reduce using rule 37
	'>'            reduce using rule 37
	'<'            reduce using rule 37
	')'            reduce using rule 37
	':'            reduce using rule 37
	"++"           reduce using rule 37
	%eof           reduce using rule 37


State 65

	ListMembers -> Atom ',' . ListMembers               (rule 40)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	'('            shift, and enter state 19
	var            shift, and enter state 15
	']'            reduce using rule 38

	Atom           goto state 17
	ListMembers    goto state 66

State 66

	ListMembers -> Atom ',' ListMembers .               (rule 40)

	']'            reduce using rule 40


State 67

	Expr -> '(' '\\' var "->" . Expr ')' "::" TypeExp "->" TypeExp    (rule 2)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 72
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 68

	Expr -> if Expr then Expr . else Expr               (rule 3)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	else           shift, and enter state 71
	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	':'            shift, and enter state 40
	"++"           shift, and enter state 41


State 69

	Expr -> let var '=' Expr . in Expr                  (rule 1)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             shift, and enter state 70
	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	':'            shift, and enter state 40
	"++"           shift, and enter state 41


State 70

	Expr -> let var '=' Expr in . Expr                  (rule 1)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 75
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 71

	Expr -> if Expr then Expr else . Expr               (rule 3)

	int            shift, and enter state 7
	float          shift, and enter state 8
	bool           shift, and enter state 9
	let            shift, and enter state 2
	if             shift, and enter state 10
	'-'            shift, and enter state 11
	quot           shift, and enter state 12
	rem            shift, and enter state 13
	'('            shift, and enter state 14
	var            shift, and enter state 15
	'['            shift, and enter state 16

	Expr           goto state 74
	Juxt           goto state 4
	Atom           goto state 5
	List           goto state 6

State 72

	Expr -> '(' '\\' var "->" Expr . ')' "::" TypeExp "->" TypeExp    (rule 2)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            shift, and enter state 73
	':'            shift, and enter state 40
	"++"           shift, and enter state 41


State 73

	Expr -> '(' '\\' var "->" Expr ')' . "::" TypeExp "->" TypeExp    (rule 2)

	"::"           shift, and enter state 76


State 74

	Expr -> if Expr then Expr else Expr .               (rule 3)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            reduce using rule 3
	':'            shift, and enter state 40
	"++"           shift, and enter state 41
	%eof           reduce using rule 3


State 75

	Expr -> let var '=' Expr in Expr .                  (rule 1)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	"&&"           shift, and enter state 32
	"||"           shift, and enter state 33
	"=="           shift, and enter state 34
	">="           shift, and enter state 35
	"<="           shift, and enter state 36
	"/="           shift, and enter state 37
	'>'            shift, and enter state 38
	'<'            shift, and enter state 39
	')'            reduce using rule 1
	':'            shift, and enter state 40
	"++"           shift, and enter state 41
	%eof           reduce using rule 1


State 76

	Expr -> '(' '\\' var "->" Expr ')' "::" . TypeExp "->" TypeExp    (rule 2)

	Int            shift, and enter state 79
	Bool           shift, and enter state 80
	Float          shift, and enter state 81
	'('            shift, and enter state 82

	TypeExp        goto state 77
	PrimType       goto state 78

State 77

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp . "->" TypeExp    (rule 2)
	TypeExp -> TypeExp . "->" TypeExp                   (rule 32)

	"->"           shift, and enter state 84


State 78

	TypeExp -> PrimType .                               (rule 31)

	in             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	"->"           reduce using rule 31
	"&&"           reduce using rule 31
	"||"           reduce using rule 31
	"=="           reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"/="           reduce using rule 31
	'>'            reduce using rule 31
	'<'            reduce using rule 31
	')'            reduce using rule 31
	':'            reduce using rule 31
	"++"           reduce using rule 31
	%eof           reduce using rule 31


State 79

	PrimType -> Int .                                   (rule 35)

	in             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	"->"           reduce using rule 35
	"&&"           reduce using rule 35
	"||"           reduce using rule 35
	"=="           reduce using rule 35
	">="           reduce using rule 35
	"<="           reduce using rule 35
	"/="           reduce using rule 35
	'>'            reduce using rule 35
	'<'            reduce using rule 35
	')'            reduce using rule 35
	':'            reduce using rule 35
	"++"           reduce using rule 35
	%eof           reduce using rule 35


State 80

	PrimType -> Bool .                                  (rule 34)

	in             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	"->"           reduce using rule 34
	"&&"           reduce using rule 34
	"||"           reduce using rule 34
	"=="           reduce using rule 34
	">="           reduce using rule 34
	"<="           reduce using rule 34
	"/="           reduce using rule 34
	'>'            reduce using rule 34
	'<'            reduce using rule 34
	')'            reduce using rule 34
	':'            reduce using rule 34
	"++"           reduce using rule 34
	%eof           reduce using rule 34


State 81

	PrimType -> Float .                                 (rule 36)

	in             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	"->"           reduce using rule 36
	"&&"           reduce using rule 36
	"||"           reduce using rule 36
	"=="           reduce using rule 36
	">="           reduce using rule 36
	"<="           reduce using rule 36
	"/="           reduce using rule 36
	'>'            reduce using rule 36
	'<'            reduce using rule 36
	')'            reduce using rule 36
	':'            reduce using rule 36
	"++"           reduce using rule 36
	%eof           reduce using rule 36


State 82

	TypeExp -> '(' . TypeExp ')'                        (rule 33)

	Int            shift, and enter state 79
	Bool           shift, and enter state 80
	Float          shift, and enter state 81
	'('            shift, and enter state 82

	TypeExp        goto state 83
	PrimType       goto state 78

State 83

	TypeExp -> TypeExp . "->" TypeExp                   (rule 32)
	TypeExp -> '(' TypeExp . ')'                        (rule 33)

	"->"           shift, and enter state 86
	')'            shift, and enter state 87


State 84

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" . TypeExp    (rule 2)
	TypeExp -> TypeExp "->" . TypeExp                   (rule 32)

	Int            shift, and enter state 79
	Bool           shift, and enter state 80
	Float          shift, and enter state 81
	'('            shift, and enter state 82

	TypeExp        goto state 85
	PrimType       goto state 78

State 85

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp .    (rule 2)
	TypeExp -> TypeExp . "->" TypeExp                   (rule 32)
	TypeExp -> TypeExp "->" TypeExp .                   (rule 32)

	in             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	"->"           shift, and enter state 86
	"&&"           reduce using rule 2
	"||"           reduce using rule 2
	"=="           reduce using rule 2
	">="           reduce using rule 2
	"<="           reduce using rule 2
	"/="           reduce using rule 2
	'>'            reduce using rule 2
	'<'            reduce using rule 2
	')'            reduce using rule 2
	':'            reduce using rule 2
	"++"           reduce using rule 2
	%eof           reduce using rule 2


State 86

	TypeExp -> TypeExp "->" . TypeExp                   (rule 32)

	Int            shift, and enter state 79
	Bool           shift, and enter state 80
	Float          shift, and enter state 81
	'('            shift, and enter state 82

	TypeExp        goto state 88
	PrimType       goto state 78

State 87

	TypeExp -> '(' TypeExp ')' .                        (rule 33)

	in             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	"->"           reduce using rule 33
	"&&"           reduce using rule 33
	"||"           reduce using rule 33
	"=="           reduce using rule 33
	">="           reduce using rule 33
	"<="           reduce using rule 33
	"/="           reduce using rule 33
	'>'            reduce using rule 33
	'<'            reduce using rule 33
	')'            reduce using rule 33
	':'            reduce using rule 33
	"++"           reduce using rule 33
	%eof           reduce using rule 33


State 88

	TypeExp -> TypeExp . "->" TypeExp                   (rule 32)
	TypeExp -> TypeExp "->" TypeExp .                   (rule 32)

	in             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	"->"           shift, and enter state 86
	"&&"           reduce using rule 32
	"||"           reduce using rule 32
	"=="           reduce using rule 32
	">="           reduce using rule 32
	"<="           reduce using rule 32
	"/="           reduce using rule 32
	'>'            reduce using rule 32
	'<'            reduce using rule 32
	')'            reduce using rule 32
	':'            reduce using rule 32
	"++"           reduce using rule 32
	%eof           reduce using rule 32


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 41
Number of terminals: 38
Number of non-terminals: 8
Number of states: 89
