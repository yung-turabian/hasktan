-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseHasquelito -> Expr                     (0)
	Expr -> let var '=' Expr in Expr                   (1)
	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp   (2)
	Expr -> if Expr then Expr else Expr                (3)
	Expr -> Expr "==" Expr                             (4)
	Expr -> Expr ">=" Expr                             (5)
	Expr -> Expr "<=" Expr                             (6)
	Expr -> Expr "/=" Expr                             (7)
	Expr -> Expr '>' Expr                              (8)
	Expr -> Expr '<' Expr                              (9)
	Expr -> Expr "&&" Expr                             (10)
	Expr -> Expr "||" Expr                             (11)
	Expr -> Expr ':' Expr                              (12)
	Expr -> Expr "++" Expr                             (13)
	Expr -> List                                       (14)
	Expr -> Form                                       (15)
	Form -> Form '+' Form                              (16)
	Form -> Form '-' Form                              (17)
	Form -> Form '*' Form                              (18)
	Form -> Form '/' Form                              (19)
	Form -> Form '^' Form                              (20)
	Form -> Juxt                                       (21)
	Juxt -> Juxt Atom                                  (22)
	Juxt -> quot Atom Atom                             (23)
	Juxt -> rem Atom Atom                              (24)
	Juxt -> '-' Atom                                   (25)
	Juxt -> Atom                                       (26)
	Atom -> '(' Expr ')'                               (27)
	Atom -> int                                        (28)
	Atom -> bool                                       (29)
	Atom -> float                                      (30)
	Atom -> var                                        (31)
	TypeExp -> PrimType                                (32)
	TypeExp -> TypeExp "->" TypeExp                    (33)
	TypeExp -> '(' TypeExp ')'                         (34)
	PrimType -> Bool                                   (35)
	PrimType -> Int                                    (36)
	PrimType -> Float                                  (37)
	List -> '[' ListMembers ']'                        (38)
	ListMembers ->                                     (39)
	ListMembers -> Atom                                (40)
	ListMembers -> Atom ',' ListMembers                (41)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	Int            { INT p }
	Bool           { BOOL p }
	Float          { FLOAT p }
	int            { INTVAL p $$ }
	float          { FLOATVAL p $$ }
	bool           { BOOLVAL p $$ }
	let            { LET p }
	in             { IN p }
	if             { IF p }
	then           { THEN p }
	else           { ELSE p }
	'\\'           { LAMBDA p }
	"->"           { ARROW p }
	"::"           { COLONS p }
	"&&"           { AND p }
	"||"           { OR p }
	'='            { BIND p }
	'+'            { PLUS p }
	'-'            { MINUS p }
	'*'            { TIMES p }
	'/'            { DIVIDE p }
	'^'            { POWER p }
	quot           { QUOT p }
	rem            { REM p }
	"=="           { EQUALS p }
	">="           { GTEQ p }
	"<="           { LTEQ p }
	"/="           { NOTEQ p }
	'>'            { GT' p }
	'<'            { LT' p }
	'('            { LPAREN p }
	')'            { RPAREN p }
	var            { VAR p $$ }
	'['            { LBRACK p }
	']'            { RBRACK p }
	':'            { COLON p }
	','            { COMMA p }
	"++"           { PLUSPLUS p }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseHasquelito rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Form            rules 16, 17, 18, 19, 20, 21
	Juxt            rules 22, 23, 24, 25, 26
	Atom            rules 27, 28, 29, 30, 31
	TypeExp         rules 32, 33, 34
	PrimType        rules 35, 36, 37
	List            rule  38
	ListMembers     rules 39, 40, 41

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 3
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 1


	let            shift, and enter state 2


State 2

	Expr -> let . var '=' Expr in Expr                  (rule 1)

	var            shift, and enter state 43


State 3

	%start_parseHasquelito -> Expr .                    (rule 0)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	':'            shift, and enter state 41
	"++"           shift, and enter state 42
	%eof           accept


State 4

	Expr -> Form .                                      (rule 15)
	Form -> Form . '+' Form                             (rule 16)
	Form -> Form . '-' Form                             (rule 17)
	Form -> Form . '*' Form                             (rule 18)
	Form -> Form . '/' Form                             (rule 19)
	Form -> Form . '^' Form                             (rule 20)

	in             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	"&&"           reduce using rule 15
	"||"           reduce using rule 15
	'+'            shift, and enter state 28
	'-'            shift, and enter state 29
	'*'            shift, and enter state 30
	'/'            shift, and enter state 31
	'^'            shift, and enter state 32
	"=="           reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15
	"/="           reduce using rule 15
	'>'            reduce using rule 15
	'<'            reduce using rule 15
	')'            reduce using rule 15
	':'            reduce using rule 15
	"++"           reduce using rule 15
	%eof           reduce using rule 15


State 5

	Form -> Juxt .                                      (rule 21)
	Juxt -> Juxt . Atom                                 (rule 22)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	in             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	"&&"           reduce using rule 21
	"||"           reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            reduce using rule 21
	"=="           reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"/="           reduce using rule 21
	'>'            reduce using rule 21
	'<'            reduce using rule 21
	'('            shift, and enter state 20
	')'            reduce using rule 21
	var            shift, and enter state 16
	':'            reduce using rule 21
	"++"           reduce using rule 21
	%eof           reduce using rule 21

	Atom           goto state 27

State 6

	Juxt -> Atom .                                      (rule 26)

	int            reduce using rule 26
	float          reduce using rule 26
	bool           reduce using rule 26
	in             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	"&&"           reduce using rule 26
	"||"           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	"=="           reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"/="           reduce using rule 26
	'>'            reduce using rule 26
	'<'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	var            reduce using rule 26
	':'            reduce using rule 26
	"++"           reduce using rule 26
	%eof           reduce using rule 26


State 7

	Expr -> List .                                      (rule 14)

	in             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	"&&"           reduce using rule 14
	"||"           reduce using rule 14
	"=="           reduce using rule 14
	">="           reduce using rule 14
	"<="           reduce using rule 14
	"/="           reduce using rule 14
	'>'            reduce using rule 14
	'<'            reduce using rule 14
	')'            reduce using rule 14
	':'            reduce using rule 14
	"++"           reduce using rule 14
	%eof           reduce using rule 14


State 8

	Atom -> int .                                       (rule 28)

	int            reduce using rule 28
	float          reduce using rule 28
	bool           reduce using rule 28
	in             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	"&&"           reduce using rule 28
	"||"           reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	"=="           reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"/="           reduce using rule 28
	'>'            reduce using rule 28
	'<'            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	var            reduce using rule 28
	']'            reduce using rule 28
	':'            reduce using rule 28
	','            reduce using rule 28
	"++"           reduce using rule 28
	%eof           reduce using rule 28


State 9

	Atom -> float .                                     (rule 30)

	int            reduce using rule 30
	float          reduce using rule 30
	bool           reduce using rule 30
	in             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	"&&"           reduce using rule 30
	"||"           reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	"=="           reduce using rule 30
	">="           reduce using rule 30
	"<="           reduce using rule 30
	"/="           reduce using rule 30
	'>'            reduce using rule 30
	'<'            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	var            reduce using rule 30
	']'            reduce using rule 30
	':'            reduce using rule 30
	','            reduce using rule 30
	"++"           reduce using rule 30
	%eof           reduce using rule 30


State 10

	Atom -> bool .                                      (rule 29)

	int            reduce using rule 29
	float          reduce using rule 29
	bool           reduce using rule 29
	in             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	"&&"           reduce using rule 29
	"||"           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	"=="           reduce using rule 29
	">="           reduce using rule 29
	"<="           reduce using rule 29
	"/="           reduce using rule 29
	'>'            reduce using rule 29
	'<'            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	var            reduce using rule 29
	']'            reduce using rule 29
	':'            reduce using rule 29
	','            reduce using rule 29
	"++"           reduce using rule 29
	%eof           reduce using rule 29


State 11

	Expr -> if . Expr then Expr else Expr               (rule 3)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 26
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 12

	Juxt -> '-' . Atom                                  (rule 25)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Atom           goto state 25

State 13

	Juxt -> quot . Atom Atom                            (rule 23)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Atom           goto state 24

State 14

	Juxt -> rem . Atom Atom                             (rule 24)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Atom           goto state 23

State 15

	Expr -> '(' . '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 2)
	Atom -> '(' . Expr ')'                              (rule 27)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'\\'           shift, and enter state 22
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 21
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 16

	Atom -> var .                                       (rule 31)

	int            reduce using rule 31
	float          reduce using rule 31
	bool           reduce using rule 31
	in             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	"&&"           reduce using rule 31
	"||"           reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	"=="           reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"/="           reduce using rule 31
	'>'            reduce using rule 31
	'<'            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	var            reduce using rule 31
	']'            reduce using rule 31
	':'            reduce using rule 31
	','            reduce using rule 31
	"++"           reduce using rule 31
	%eof           reduce using rule 31


State 17

	List -> '[' . ListMembers ']'                       (rule 38)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 20
	var            shift, and enter state 16
	']'            reduce using rule 39

	Atom           goto state 18
	ListMembers    goto state 19

State 18

	ListMembers -> Atom .                               (rule 40)
	ListMembers -> Atom . ',' ListMembers               (rule 41)

	']'            reduce using rule 40
	','            shift, and enter state 66


State 19

	List -> '[' ListMembers . ']'                       (rule 38)

	']'            shift, and enter state 65


State 20

	Atom -> '(' . Expr ')'                              (rule 27)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 21
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 21

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)
	Atom -> '(' Expr . ')'                              (rule 27)

	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            shift, and enter state 64
	':'            shift, and enter state 41
	"++"           shift, and enter state 42


State 22

	Expr -> '(' '\\' . var "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 2)

	var            shift, and enter state 63


State 23

	Juxt -> rem Atom . Atom                             (rule 24)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Atom           goto state 62

State 24

	Juxt -> quot Atom . Atom                            (rule 23)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Atom           goto state 61

State 25

	Juxt -> '-' Atom .                                  (rule 25)

	int            reduce using rule 25
	float          reduce using rule 25
	bool           reduce using rule 25
	in             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	"&&"           reduce using rule 25
	"||"           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	"=="           reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"/="           reduce using rule 25
	'>'            reduce using rule 25
	'<'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	var            reduce using rule 25
	':'            reduce using rule 25
	"++"           reduce using rule 25
	%eof           reduce using rule 25


State 26

	Expr -> if Expr . then Expr else Expr               (rule 3)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	then           shift, and enter state 60
	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	':'            shift, and enter state 41
	"++"           shift, and enter state 42


State 27

	Juxt -> Juxt Atom .                                 (rule 22)

	int            reduce using rule 22
	float          reduce using rule 22
	bool           reduce using rule 22
	in             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	"&&"           reduce using rule 22
	"||"           reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            reduce using rule 22
	"=="           reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"/="           reduce using rule 22
	'>'            reduce using rule 22
	'<'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	var            reduce using rule 22
	':'            reduce using rule 22
	"++"           reduce using rule 22
	%eof           reduce using rule 22


State 28

	Form -> Form '+' . Form                             (rule 16)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Form           goto state 59
	Juxt           goto state 5
	Atom           goto state 6

State 29

	Form -> Form '-' . Form                             (rule 17)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Form           goto state 58
	Juxt           goto state 5
	Atom           goto state 6

State 30

	Form -> Form '*' . Form                             (rule 18)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Form           goto state 57
	Juxt           goto state 5
	Atom           goto state 6

State 31

	Form -> Form '/' . Form                             (rule 19)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Form           goto state 56
	Juxt           goto state 5
	Atom           goto state 6

State 32

	Form -> Form '^' . Form                             (rule 20)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 20
	var            shift, and enter state 16

	Form           goto state 55
	Juxt           goto state 5
	Atom           goto state 6

State 33

	Expr -> Expr "&&" . Expr                            (rule 10)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 54
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 34

	Expr -> Expr "||" . Expr                            (rule 11)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 53
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 35

	Expr -> Expr "==" . Expr                            (rule 4)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 52
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 36

	Expr -> Expr ">=" . Expr                            (rule 5)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 51
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 37

	Expr -> Expr "<=" . Expr                            (rule 6)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 50
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 38

	Expr -> Expr "/=" . Expr                            (rule 7)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 49
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 39

	Expr -> Expr '>' . Expr                             (rule 8)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 48
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 40

	Expr -> Expr '<' . Expr                             (rule 9)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 47
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 41

	Expr -> Expr ':' . Expr                             (rule 12)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 46
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 42

	Expr -> Expr "++" . Expr                            (rule 13)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 45
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 43

	Expr -> let var . '=' Expr in Expr                  (rule 1)

	'='            shift, and enter state 44


State 44

	Expr -> let var '=' . Expr in Expr                  (rule 1)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 70
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 45

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)
	Expr -> Expr "++" Expr .                            (rule 13)

	in             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            reduce using rule 13
	':'            shift, and enter state 41
	"++"           shift, and enter state 42
	%eof           reduce using rule 13


State 46

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr ':' Expr .                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            reduce using rule 12
	':'            shift, and enter state 41
	"++"           shift, and enter state 42
	%eof           reduce using rule 12


State 47

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr '<' Expr .                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	"&&"           reduce using rule 9
	"||"           reduce using rule 9
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 9
	':'            reduce using rule 9
	"++"           reduce using rule 9
	%eof           reduce using rule 9


State 48

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr '>' Expr .                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	"&&"           reduce using rule 8
	"||"           reduce using rule 8
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 8
	':'            reduce using rule 8
	"++"           reduce using rule 8
	%eof           reduce using rule 8


State 49

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr "/=" Expr .                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	"&&"           reduce using rule 7
	"||"           reduce using rule 7
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 7
	':'            reduce using rule 7
	"++"           reduce using rule 7
	%eof           reduce using rule 7


State 50

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr "<=" Expr .                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	"&&"           reduce using rule 6
	"||"           reduce using rule 6
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 6
	':'            reduce using rule 6
	"++"           reduce using rule 6
	%eof           reduce using rule 6


State 51

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr ">=" Expr .                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	"&&"           reduce using rule 5
	"||"           reduce using rule 5
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 5
	':'            reduce using rule 5
	"++"           reduce using rule 5
	%eof           reduce using rule 5


State 52

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr "==" Expr .                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	"&&"           reduce using rule 4
	"||"           reduce using rule 4
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 4
	':'            reduce using rule 4
	"++"           reduce using rule 4
	%eof           reduce using rule 4


State 53

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr "||" Expr .                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	"&&"           fail
	"||"           fail
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            reduce using rule 11
	':'            reduce using rule 11
	"++"           reduce using rule 11
	%eof           reduce using rule 11


State 54

	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr "&&" Expr .                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	"&&"           fail
	"||"           fail
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            reduce using rule 10
	':'            reduce using rule 10
	"++"           reduce using rule 10
	%eof           reduce using rule 10


State 55

	Form -> Form . '+' Form                             (rule 16)
	Form -> Form . '-' Form                             (rule 17)
	Form -> Form . '*' Form                             (rule 18)
	Form -> Form . '/' Form                             (rule 19)
	Form -> Form . '^' Form                             (rule 20)
	Form -> Form '^' Form .                             (rule 20)

	in             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	"&&"           reduce using rule 20
	"||"           reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            reduce using rule 20
	"=="           reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"/="           reduce using rule 20
	'>'            reduce using rule 20
	'<'            reduce using rule 20
	')'            reduce using rule 20
	':'            reduce using rule 20
	"++"           reduce using rule 20
	%eof           reduce using rule 20


State 56

	Form -> Form . '+' Form                             (rule 16)
	Form -> Form . '-' Form                             (rule 17)
	Form -> Form . '*' Form                             (rule 18)
	Form -> Form . '/' Form                             (rule 19)
	Form -> Form '/' Form .                             (rule 19)
	Form -> Form . '^' Form                             (rule 20)

	in             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	"&&"           reduce using rule 19
	"||"           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'^'            shift, and enter state 32
	"=="           reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"/="           reduce using rule 19
	'>'            reduce using rule 19
	'<'            reduce using rule 19
	')'            reduce using rule 19
	':'            reduce using rule 19
	"++"           reduce using rule 19
	%eof           reduce using rule 19


State 57

	Form -> Form . '+' Form                             (rule 16)
	Form -> Form . '-' Form                             (rule 17)
	Form -> Form . '*' Form                             (rule 18)
	Form -> Form '*' Form .                             (rule 18)
	Form -> Form . '/' Form                             (rule 19)
	Form -> Form . '^' Form                             (rule 20)

	in             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	"&&"           reduce using rule 18
	"||"           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'^'            shift, and enter state 32
	"=="           reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"/="           reduce using rule 18
	'>'            reduce using rule 18
	'<'            reduce using rule 18
	')'            reduce using rule 18
	':'            reduce using rule 18
	"++"           reduce using rule 18
	%eof           reduce using rule 18


State 58

	Form -> Form . '+' Form                             (rule 16)
	Form -> Form . '-' Form                             (rule 17)
	Form -> Form '-' Form .                             (rule 17)
	Form -> Form . '*' Form                             (rule 18)
	Form -> Form . '/' Form                             (rule 19)
	Form -> Form . '^' Form                             (rule 20)

	in             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	"&&"           reduce using rule 17
	"||"           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            shift, and enter state 30
	'/'            shift, and enter state 31
	'^'            shift, and enter state 32
	"=="           reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"/="           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	')'            reduce using rule 17
	':'            reduce using rule 17
	"++"           reduce using rule 17
	%eof           reduce using rule 17


State 59

	Form -> Form . '+' Form                             (rule 16)
	Form -> Form '+' Form .                             (rule 16)
	Form -> Form . '-' Form                             (rule 17)
	Form -> Form . '*' Form                             (rule 18)
	Form -> Form . '/' Form                             (rule 19)
	Form -> Form . '^' Form                             (rule 20)

	in             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	"&&"           reduce using rule 16
	"||"           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            shift, and enter state 30
	'/'            shift, and enter state 31
	'^'            shift, and enter state 32
	"=="           reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	"/="           reduce using rule 16
	'>'            reduce using rule 16
	'<'            reduce using rule 16
	')'            reduce using rule 16
	':'            reduce using rule 16
	"++"           reduce using rule 16
	%eof           reduce using rule 16


State 60

	Expr -> if Expr then . Expr else Expr               (rule 3)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 69
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 61

	Juxt -> quot Atom Atom .                            (rule 23)

	int            reduce using rule 23
	float          reduce using rule 23
	bool           reduce using rule 23
	in             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	"&&"           reduce using rule 23
	"||"           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            reduce using rule 23
	"=="           reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"/="           reduce using rule 23
	'>'            reduce using rule 23
	'<'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	var            reduce using rule 23
	':'            reduce using rule 23
	"++"           reduce using rule 23
	%eof           reduce using rule 23


State 62

	Juxt -> rem Atom Atom .                             (rule 24)

	int            reduce using rule 24
	float          reduce using rule 24
	bool           reduce using rule 24
	in             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	"&&"           reduce using rule 24
	"||"           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            reduce using rule 24
	"=="           reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"/="           reduce using rule 24
	'>'            reduce using rule 24
	'<'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	var            reduce using rule 24
	':'            reduce using rule 24
	"++"           reduce using rule 24
	%eof           reduce using rule 24


State 63

	Expr -> '(' '\\' var . "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 2)

	"->"           shift, and enter state 68


State 64

	Atom -> '(' Expr ')' .                              (rule 27)

	int            reduce using rule 27
	float          reduce using rule 27
	bool           reduce using rule 27
	in             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	"&&"           reduce using rule 27
	"||"           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	"=="           reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"/="           reduce using rule 27
	'>'            reduce using rule 27
	'<'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	var            reduce using rule 27
	']'            reduce using rule 27
	':'            reduce using rule 27
	','            reduce using rule 27
	"++"           reduce using rule 27
	%eof           reduce using rule 27


State 65

	List -> '[' ListMembers ']' .                       (rule 38)

	in             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	"&&"           reduce using rule 38
	"||"           reduce using rule 38
	"=="           reduce using rule 38
	">="           reduce using rule 38
	"<="           reduce using rule 38
	"/="           reduce using rule 38
	'>'            reduce using rule 38
	'<'            reduce using rule 38
	')'            reduce using rule 38
	':'            reduce using rule 38
	"++"           reduce using rule 38
	%eof           reduce using rule 38


State 66

	ListMembers -> Atom ',' . ListMembers               (rule 41)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 20
	var            shift, and enter state 16
	']'            reduce using rule 39

	Atom           goto state 18
	ListMembers    goto state 67

State 67

	ListMembers -> Atom ',' ListMembers .               (rule 41)

	']'            reduce using rule 41


State 68

	Expr -> '(' '\\' var "->" . Expr ')' "::" TypeExp "->" TypeExp    (rule 2)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 73
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 69

	Expr -> if Expr then Expr . else Expr               (rule 3)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	else           shift, and enter state 72
	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	':'            shift, and enter state 41
	"++"           shift, and enter state 42


State 70

	Expr -> let var '=' Expr . in Expr                  (rule 1)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             shift, and enter state 71
	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	':'            shift, and enter state 41
	"++"           shift, and enter state 42


State 71

	Expr -> let var '=' Expr in . Expr                  (rule 1)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 76
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 72

	Expr -> if Expr then Expr else . Expr               (rule 3)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	if             shift, and enter state 11
	'-'            shift, and enter state 12
	quot           shift, and enter state 13
	rem            shift, and enter state 14
	'('            shift, and enter state 15
	var            shift, and enter state 16
	'['            shift, and enter state 17

	Expr           goto state 75
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 73

	Expr -> '(' '\\' var "->" Expr . ')' "::" TypeExp "->" TypeExp    (rule 2)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            shift, and enter state 74
	':'            shift, and enter state 41
	"++"           shift, and enter state 42


State 74

	Expr -> '(' '\\' var "->" Expr ')' . "::" TypeExp "->" TypeExp    (rule 2)

	"::"           shift, and enter state 77


State 75

	Expr -> if Expr then Expr else Expr .               (rule 3)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            reduce using rule 3
	':'            shift, and enter state 41
	"++"           shift, and enter state 42
	%eof           reduce using rule 3


State 76

	Expr -> let var '=' Expr in Expr .                  (rule 1)
	Expr -> Expr . "==" Expr                            (rule 4)
	Expr -> Expr . ">=" Expr                            (rule 5)
	Expr -> Expr . "<=" Expr                            (rule 6)
	Expr -> Expr . "/=" Expr                            (rule 7)
	Expr -> Expr . '>' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . "&&" Expr                            (rule 10)
	Expr -> Expr . "||" Expr                            (rule 11)
	Expr -> Expr . ':' Expr                             (rule 12)
	Expr -> Expr . "++" Expr                            (rule 13)

	in             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	"&&"           shift, and enter state 33
	"||"           shift, and enter state 34
	"=="           shift, and enter state 35
	">="           shift, and enter state 36
	"<="           shift, and enter state 37
	"/="           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	')'            reduce using rule 1
	':'            shift, and enter state 41
	"++"           shift, and enter state 42
	%eof           reduce using rule 1


State 77

	Expr -> '(' '\\' var "->" Expr ')' "::" . TypeExp "->" TypeExp    (rule 2)

	Int            shift, and enter state 80
	Bool           shift, and enter state 81
	Float          shift, and enter state 82
	'('            shift, and enter state 83

	TypeExp        goto state 78
	PrimType       goto state 79

State 78

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp . "->" TypeExp    (rule 2)
	TypeExp -> TypeExp . "->" TypeExp                   (rule 33)

	"->"           shift, and enter state 85


State 79

	TypeExp -> PrimType .                               (rule 32)

	in             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	"->"           reduce using rule 32
	"&&"           reduce using rule 32
	"||"           reduce using rule 32
	"=="           reduce using rule 32
	">="           reduce using rule 32
	"<="           reduce using rule 32
	"/="           reduce using rule 32
	'>'            reduce using rule 32
	'<'            reduce using rule 32
	')'            reduce using rule 32
	':'            reduce using rule 32
	"++"           reduce using rule 32
	%eof           reduce using rule 32


State 80

	PrimType -> Int .                                   (rule 36)

	in             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	"->"           reduce using rule 36
	"&&"           reduce using rule 36
	"||"           reduce using rule 36
	"=="           reduce using rule 36
	">="           reduce using rule 36
	"<="           reduce using rule 36
	"/="           reduce using rule 36
	'>'            reduce using rule 36
	'<'            reduce using rule 36
	')'            reduce using rule 36
	':'            reduce using rule 36
	"++"           reduce using rule 36
	%eof           reduce using rule 36


State 81

	PrimType -> Bool .                                  (rule 35)

	in             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	"->"           reduce using rule 35
	"&&"           reduce using rule 35
	"||"           reduce using rule 35
	"=="           reduce using rule 35
	">="           reduce using rule 35
	"<="           reduce using rule 35
	"/="           reduce using rule 35
	'>'            reduce using rule 35
	'<'            reduce using rule 35
	')'            reduce using rule 35
	':'            reduce using rule 35
	"++"           reduce using rule 35
	%eof           reduce using rule 35


State 82

	PrimType -> Float .                                 (rule 37)

	in             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	"->"           reduce using rule 37
	"&&"           reduce using rule 37
	"||"           reduce using rule 37
	"=="           reduce using rule 37
	">="           reduce using rule 37
	"<="           reduce using rule 37
	"/="           reduce using rule 37
	'>'            reduce using rule 37
	'<'            reduce using rule 37
	')'            reduce using rule 37
	':'            reduce using rule 37
	"++"           reduce using rule 37
	%eof           reduce using rule 37


State 83

	TypeExp -> '(' . TypeExp ')'                        (rule 34)

	Int            shift, and enter state 80
	Bool           shift, and enter state 81
	Float          shift, and enter state 82
	'('            shift, and enter state 83

	TypeExp        goto state 84
	PrimType       goto state 79

State 84

	TypeExp -> TypeExp . "->" TypeExp                   (rule 33)
	TypeExp -> '(' TypeExp . ')'                        (rule 34)

	"->"           shift, and enter state 87
	')'            shift, and enter state 88


State 85

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" . TypeExp    (rule 2)
	TypeExp -> TypeExp "->" . TypeExp                   (rule 33)

	Int            shift, and enter state 80
	Bool           shift, and enter state 81
	Float          shift, and enter state 82
	'('            shift, and enter state 83

	TypeExp        goto state 86
	PrimType       goto state 79

State 86

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp .    (rule 2)
	TypeExp -> TypeExp . "->" TypeExp                   (rule 33)
	TypeExp -> TypeExp "->" TypeExp .                   (rule 33)

	in             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	"->"           shift, and enter state 87
	"&&"           reduce using rule 2
	"||"           reduce using rule 2
	"=="           reduce using rule 2
	">="           reduce using rule 2
	"<="           reduce using rule 2
	"/="           reduce using rule 2
	'>'            reduce using rule 2
	'<'            reduce using rule 2
	')'            reduce using rule 2
	':'            reduce using rule 2
	"++"           reduce using rule 2
	%eof           reduce using rule 2


State 87

	TypeExp -> TypeExp "->" . TypeExp                   (rule 33)

	Int            shift, and enter state 80
	Bool           shift, and enter state 81
	Float          shift, and enter state 82
	'('            shift, and enter state 83

	TypeExp        goto state 89
	PrimType       goto state 79

State 88

	TypeExp -> '(' TypeExp ')' .                        (rule 34)

	in             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	"->"           reduce using rule 34
	"&&"           reduce using rule 34
	"||"           reduce using rule 34
	"=="           reduce using rule 34
	">="           reduce using rule 34
	"<="           reduce using rule 34
	"/="           reduce using rule 34
	'>'            reduce using rule 34
	'<'            reduce using rule 34
	')'            reduce using rule 34
	':'            reduce using rule 34
	"++"           reduce using rule 34
	%eof           reduce using rule 34


State 89

	TypeExp -> TypeExp . "->" TypeExp                   (rule 33)
	TypeExp -> TypeExp "->" TypeExp .                   (rule 33)

	in             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	"->"           shift, and enter state 87
	"&&"           reduce using rule 33
	"||"           reduce using rule 33
	"=="           reduce using rule 33
	">="           reduce using rule 33
	"<="           reduce using rule 33
	"/="           reduce using rule 33
	'>'            reduce using rule 33
	'<'            reduce using rule 33
	')'            reduce using rule 33
	':'            reduce using rule 33
	"++"           reduce using rule 33
	%eof           reduce using rule 33


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 42
Number of terminals: 38
Number of non-terminals: 9
Number of states: 90
