-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseHasquelito -> Expr                     (0)
	Expr -> let var '=' Expr in Expr                   (1)
	Expr -> letrec var '=' Expr in Expr                (2)
	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp   (3)
	Expr -> if Expr then Expr else Expr                (4)
	Expr -> Expr "==" Expr                             (5)
	Expr -> Expr ">=" Expr                             (6)
	Expr -> Expr "<=" Expr                             (7)
	Expr -> Expr "/=" Expr                             (8)
	Expr -> Expr '>' Expr                              (9)
	Expr -> Expr '<' Expr                              (10)
	Expr -> Expr "&&" Expr                             (11)
	Expr -> Expr "||" Expr                             (12)
	Expr -> Expr ':' Expr                              (13)
	Expr -> Expr "++" Expr                             (14)
	Expr -> head Expr                                  (15)
	Expr -> tail Expr                                  (16)
	Expr -> List                                       (17)
	Expr -> Form                                       (18)
	Form -> Form '+' Form                              (19)
	Form -> Form '-' Form                              (20)
	Form -> Form '*' Form                              (21)
	Form -> Form '/' Form                              (22)
	Form -> Form '^' Form                              (23)
	Form -> Juxt                                       (24)
	Juxt -> Juxt Atom                                  (25)
	Juxt -> quot Atom Atom                             (26)
	Juxt -> rem Atom Atom                              (27)
	Juxt -> '-' Atom                                   (28)
	Juxt -> Atom                                       (29)
	Atom -> '(' Expr ')'                               (30)
	Atom -> int                                        (31)
	Atom -> bool                                       (32)
	Atom -> float                                      (33)
	Atom -> var                                        (34)
	TypeExp -> PrimType                                (35)
	TypeExp -> TypeExp "->" TypeExp                    (36)
	TypeExp -> '(' TypeExp ')'                         (37)
	TypeExp -> '[' TypeExp ']'                         (38)
	TypeExp -> '[' ']'                                 (39)
	PrimType -> Bool                                   (40)
	PrimType -> Int                                    (41)
	PrimType -> Float                                  (42)
	List -> '[' ListMembers ']'                        (43)
	ListMembers ->                                     (44)
	ListMembers -> Atom                                (45)
	ListMembers -> Atom ',' ListMembers                (46)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	Int            { INT p }
	Bool           { BOOL p }
	Float          { FLOAT p }
	int            { INTVAL p $$ }
	float          { FLOATVAL p $$ }
	bool           { BOOLVAL p $$ }
	let            { LET p }
	letrec         { LET_REC p }
	in             { IN p }
	if             { IF p }
	then           { THEN p }
	else           { ELSE p }
	'\\'           { LAMBDA p }
	"->"           { ARROW p }
	"::"           { COLONS p }
	"&&"           { AND p }
	"||"           { OR p }
	'='            { BIND p }
	'+'            { PLUS p }
	'-'            { MINUS p }
	'*'            { TIMES p }
	'/'            { DIVIDE p }
	'^'            { POWER p }
	quot           { QUOT p }
	rem            { REM p }
	"=="           { EQUALS p }
	">="           { GTEQ p }
	"<="           { LTEQ p }
	"/="           { NOTEQ p }
	'>'            { GT' p }
	'<'            { LT' p }
	'('            { LPAREN p }
	')'            { RPAREN p }
	var            { VAR p $$ }
	'['            { LBRACK p }
	']'            { RBRACK p }
	':'            { COLON p }
	','            { COMMA p }
	"++"           { PLUSPLUS p }
	head           { HEAD p }
	tail           { TAIL p }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseHasquelito rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
	Form            rules 19, 20, 21, 22, 23, 24
	Juxt            rules 25, 26, 27, 28, 29
	Atom            rules 30, 31, 32, 33, 34
	TypeExp         rules 35, 36, 37, 38, 39
	PrimType        rules 40, 41, 42
	List            rule  43
	ListMembers     rules 44, 45, 46

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 3
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 1


	let            shift, and enter state 2


State 2

	Expr -> let . var '=' Expr in Expr                  (rule 1)

	var            shift, and enter state 49


State 3

	%start_parseHasquelito -> Expr .                    (rule 0)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           accept


State 4

	Expr -> Form .                                      (rule 18)
	Form -> Form . '+' Form                             (rule 19)
	Form -> Form . '-' Form                             (rule 20)
	Form -> Form . '*' Form                             (rule 21)
	Form -> Form . '/' Form                             (rule 22)
	Form -> Form . '^' Form                             (rule 23)

	in             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	"&&"           reduce using rule 18
	"||"           reduce using rule 18
	'+'            shift, and enter state 34
	'-'            shift, and enter state 35
	'*'            shift, and enter state 36
	'/'            shift, and enter state 37
	'^'            shift, and enter state 38
	"=="           reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"/="           reduce using rule 18
	'>'            reduce using rule 18
	'<'            reduce using rule 18
	')'            reduce using rule 18
	':'            reduce using rule 18
	"++"           reduce using rule 18
	%eof           reduce using rule 18


State 5

	Form -> Juxt .                                      (rule 24)
	Juxt -> Juxt . Atom                                 (rule 25)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	in             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	"&&"           reduce using rule 24
	"||"           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            reduce using rule 24
	"=="           reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"/="           reduce using rule 24
	'>'            reduce using rule 24
	'<'            reduce using rule 24
	'('            shift, and enter state 25
	')'            reduce using rule 24
	var            shift, and enter state 17
	':'            reduce using rule 24
	"++"           reduce using rule 24
	%eof           reduce using rule 24

	Atom           goto state 33

State 6

	Juxt -> Atom .                                      (rule 29)

	int            reduce using rule 29
	float          reduce using rule 29
	bool           reduce using rule 29
	in             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	"&&"           reduce using rule 29
	"||"           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	"=="           reduce using rule 29
	">="           reduce using rule 29
	"<="           reduce using rule 29
	"/="           reduce using rule 29
	'>'            reduce using rule 29
	'<'            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	var            reduce using rule 29
	':'            reduce using rule 29
	"++"           reduce using rule 29
	%eof           reduce using rule 29


State 7

	Expr -> List .                                      (rule 17)

	in             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	"&&"           reduce using rule 17
	"||"           reduce using rule 17
	"=="           reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"/="           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	')'            reduce using rule 17
	':'            reduce using rule 17
	"++"           reduce using rule 17
	%eof           reduce using rule 17


State 8

	Atom -> int .                                       (rule 31)

	int            reduce using rule 31
	float          reduce using rule 31
	bool           reduce using rule 31
	in             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	"&&"           reduce using rule 31
	"||"           reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	"=="           reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"/="           reduce using rule 31
	'>'            reduce using rule 31
	'<'            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	var            reduce using rule 31
	']'            reduce using rule 31
	':'            reduce using rule 31
	','            reduce using rule 31
	"++"           reduce using rule 31
	%eof           reduce using rule 31


State 9

	Atom -> float .                                     (rule 33)

	int            reduce using rule 33
	float          reduce using rule 33
	bool           reduce using rule 33
	in             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	"&&"           reduce using rule 33
	"||"           reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	"=="           reduce using rule 33
	">="           reduce using rule 33
	"<="           reduce using rule 33
	"/="           reduce using rule 33
	'>'            reduce using rule 33
	'<'            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	var            reduce using rule 33
	']'            reduce using rule 33
	':'            reduce using rule 33
	','            reduce using rule 33
	"++"           reduce using rule 33
	%eof           reduce using rule 33


State 10

	Atom -> bool .                                      (rule 32)

	int            reduce using rule 32
	float          reduce using rule 32
	bool           reduce using rule 32
	in             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	"&&"           reduce using rule 32
	"||"           reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	"=="           reduce using rule 32
	">="           reduce using rule 32
	"<="           reduce using rule 32
	"/="           reduce using rule 32
	'>'            reduce using rule 32
	'<'            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	var            reduce using rule 32
	']'            reduce using rule 32
	':'            reduce using rule 32
	','            reduce using rule 32
	"++"           reduce using rule 32
	%eof           reduce using rule 32


State 11

	Expr -> letrec . var '=' Expr in Expr               (rule 2)

	var            shift, and enter state 32


State 12

	Expr -> if . Expr then Expr else Expr               (rule 4)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 31
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 13

	Juxt -> '-' . Atom                                  (rule 28)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Atom           goto state 30

State 14

	Juxt -> quot . Atom Atom                            (rule 26)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Atom           goto state 29

State 15

	Juxt -> rem . Atom Atom                             (rule 27)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Atom           goto state 28

State 16

	Expr -> '(' . '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 3)
	Atom -> '(' . Expr ')'                              (rule 30)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'\\'           shift, and enter state 27
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 26
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 17

	Atom -> var .                                       (rule 34)

	int            reduce using rule 34
	float          reduce using rule 34
	bool           reduce using rule 34
	in             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	"&&"           reduce using rule 34
	"||"           reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	"=="           reduce using rule 34
	">="           reduce using rule 34
	"<="           reduce using rule 34
	"/="           reduce using rule 34
	'>'            reduce using rule 34
	'<'            reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	var            reduce using rule 34
	']'            reduce using rule 34
	':'            reduce using rule 34
	','            reduce using rule 34
	"++"           reduce using rule 34
	%eof           reduce using rule 34


State 18

	List -> '[' . ListMembers ']'                       (rule 43)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 25
	var            shift, and enter state 17
	']'            reduce using rule 44

	Atom           goto state 23
	ListMembers    goto state 24

State 19

	Expr -> head . Expr                                 (rule 15)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 22
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 20

	Expr -> tail . Expr                                 (rule 16)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 21
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 21

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)
	Expr -> tail Expr .                                 (rule 16)

	in             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 16
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           reduce using rule 16


State 22

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)
	Expr -> head Expr .                                 (rule 15)

	in             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 15
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           reduce using rule 15


State 23

	ListMembers -> Atom .                               (rule 45)
	ListMembers -> Atom . ',' ListMembers               (rule 46)

	']'            reduce using rule 45
	','            shift, and enter state 73


State 24

	List -> '[' ListMembers . ']'                       (rule 43)

	']'            shift, and enter state 72


State 25

	Atom -> '(' . Expr ')'                              (rule 30)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 26
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 26

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)
	Atom -> '(' Expr . ')'                              (rule 30)

	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            shift, and enter state 71
	':'            shift, and enter state 47
	"++"           shift, and enter state 48


State 27

	Expr -> '(' '\\' . var "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 3)

	var            shift, and enter state 70


State 28

	Juxt -> rem Atom . Atom                             (rule 27)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Atom           goto state 69

State 29

	Juxt -> quot Atom . Atom                            (rule 26)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Atom           goto state 68

State 30

	Juxt -> '-' Atom .                                  (rule 28)

	int            reduce using rule 28
	float          reduce using rule 28
	bool           reduce using rule 28
	in             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	"&&"           reduce using rule 28
	"||"           reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	"=="           reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"/="           reduce using rule 28
	'>'            reduce using rule 28
	'<'            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	var            reduce using rule 28
	':'            reduce using rule 28
	"++"           reduce using rule 28
	%eof           reduce using rule 28


State 31

	Expr -> if Expr . then Expr else Expr               (rule 4)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	then           shift, and enter state 67
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	':'            shift, and enter state 47
	"++"           shift, and enter state 48


State 32

	Expr -> letrec var . '=' Expr in Expr               (rule 2)

	'='            shift, and enter state 66


State 33

	Juxt -> Juxt Atom .                                 (rule 25)

	int            reduce using rule 25
	float          reduce using rule 25
	bool           reduce using rule 25
	in             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	"&&"           reduce using rule 25
	"||"           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	"=="           reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"/="           reduce using rule 25
	'>'            reduce using rule 25
	'<'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	var            reduce using rule 25
	':'            reduce using rule 25
	"++"           reduce using rule 25
	%eof           reduce using rule 25


State 34

	Form -> Form '+' . Form                             (rule 19)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Form           goto state 65
	Juxt           goto state 5
	Atom           goto state 6

State 35

	Form -> Form '-' . Form                             (rule 20)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Form           goto state 64
	Juxt           goto state 5
	Atom           goto state 6

State 36

	Form -> Form '*' . Form                             (rule 21)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Form           goto state 63
	Juxt           goto state 5
	Atom           goto state 6

State 37

	Form -> Form '/' . Form                             (rule 22)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Form           goto state 62
	Juxt           goto state 5
	Atom           goto state 6

State 38

	Form -> Form '^' . Form                             (rule 23)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 25
	var            shift, and enter state 17

	Form           goto state 61
	Juxt           goto state 5
	Atom           goto state 6

State 39

	Expr -> Expr "&&" . Expr                            (rule 11)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 60
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 40

	Expr -> Expr "||" . Expr                            (rule 12)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 59
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 41

	Expr -> Expr "==" . Expr                            (rule 5)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 58
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 42

	Expr -> Expr ">=" . Expr                            (rule 6)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 57
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 43

	Expr -> Expr "<=" . Expr                            (rule 7)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 56
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 44

	Expr -> Expr "/=" . Expr                            (rule 8)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 55
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 45

	Expr -> Expr '>' . Expr                             (rule 9)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 54
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 46

	Expr -> Expr '<' . Expr                             (rule 10)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 53
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 47

	Expr -> Expr ':' . Expr                             (rule 13)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 52
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 48

	Expr -> Expr "++" . Expr                            (rule 14)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 51
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 49

	Expr -> let var . '=' Expr in Expr                  (rule 1)

	'='            shift, and enter state 50


State 50

	Expr -> let var '=' . Expr in Expr                  (rule 1)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 78
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 51

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)
	Expr -> Expr "++" Expr .                            (rule 14)

	in             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 14
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           reduce using rule 14


State 52

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr ':' Expr .                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 13
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           reduce using rule 13


State 53

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr '<' Expr .                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	"&&"           reduce using rule 10
	"||"           reduce using rule 10
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 10
	':'            reduce using rule 10
	"++"           reduce using rule 10
	%eof           reduce using rule 10


State 54

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr '>' Expr .                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	"&&"           reduce using rule 9
	"||"           reduce using rule 9
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 9
	':'            reduce using rule 9
	"++"           reduce using rule 9
	%eof           reduce using rule 9


State 55

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr "/=" Expr .                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	"&&"           reduce using rule 8
	"||"           reduce using rule 8
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 8
	':'            reduce using rule 8
	"++"           reduce using rule 8
	%eof           reduce using rule 8


State 56

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr "<=" Expr .                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	"&&"           reduce using rule 7
	"||"           reduce using rule 7
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 7
	':'            reduce using rule 7
	"++"           reduce using rule 7
	%eof           reduce using rule 7


State 57

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr ">=" Expr .                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	"&&"           reduce using rule 6
	"||"           reduce using rule 6
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 6
	':'            reduce using rule 6
	"++"           reduce using rule 6
	%eof           reduce using rule 6


State 58

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr "==" Expr .                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	"&&"           reduce using rule 5
	"||"           reduce using rule 5
	"=="           fail
	">="           fail
	"<="           fail
	"/="           fail
	'>'            fail
	'<'            fail
	')'            reduce using rule 5
	':'            reduce using rule 5
	"++"           reduce using rule 5
	%eof           reduce using rule 5


State 59

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr "||" Expr .                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	"&&"           fail
	"||"           fail
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 12
	':'            reduce using rule 12
	"++"           reduce using rule 12
	%eof           reduce using rule 12


State 60

	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr "&&" Expr .                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	"&&"           fail
	"||"           fail
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 11
	':'            reduce using rule 11
	"++"           reduce using rule 11
	%eof           reduce using rule 11


State 61

	Form -> Form . '+' Form                             (rule 19)
	Form -> Form . '-' Form                             (rule 20)
	Form -> Form . '*' Form                             (rule 21)
	Form -> Form . '/' Form                             (rule 22)
	Form -> Form . '^' Form                             (rule 23)
	Form -> Form '^' Form .                             (rule 23)

	in             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	"&&"           reduce using rule 23
	"||"           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            reduce using rule 23
	"=="           reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"/="           reduce using rule 23
	'>'            reduce using rule 23
	'<'            reduce using rule 23
	')'            reduce using rule 23
	':'            reduce using rule 23
	"++"           reduce using rule 23
	%eof           reduce using rule 23


State 62

	Form -> Form . '+' Form                             (rule 19)
	Form -> Form . '-' Form                             (rule 20)
	Form -> Form . '*' Form                             (rule 21)
	Form -> Form . '/' Form                             (rule 22)
	Form -> Form '/' Form .                             (rule 22)
	Form -> Form . '^' Form                             (rule 23)

	in             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	"&&"           reduce using rule 22
	"||"           reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            shift, and enter state 38
	"=="           reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"/="           reduce using rule 22
	'>'            reduce using rule 22
	'<'            reduce using rule 22
	')'            reduce using rule 22
	':'            reduce using rule 22
	"++"           reduce using rule 22
	%eof           reduce using rule 22


State 63

	Form -> Form . '+' Form                             (rule 19)
	Form -> Form . '-' Form                             (rule 20)
	Form -> Form . '*' Form                             (rule 21)
	Form -> Form '*' Form .                             (rule 21)
	Form -> Form . '/' Form                             (rule 22)
	Form -> Form . '^' Form                             (rule 23)

	in             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	"&&"           reduce using rule 21
	"||"           reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            shift, and enter state 38
	"=="           reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"/="           reduce using rule 21
	'>'            reduce using rule 21
	'<'            reduce using rule 21
	')'            reduce using rule 21
	':'            reduce using rule 21
	"++"           reduce using rule 21
	%eof           reduce using rule 21


State 64

	Form -> Form . '+' Form                             (rule 19)
	Form -> Form . '-' Form                             (rule 20)
	Form -> Form '-' Form .                             (rule 20)
	Form -> Form . '*' Form                             (rule 21)
	Form -> Form . '/' Form                             (rule 22)
	Form -> Form . '^' Form                             (rule 23)

	in             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	"&&"           reduce using rule 20
	"||"           reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            shift, and enter state 36
	'/'            shift, and enter state 37
	'^'            shift, and enter state 38
	"=="           reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"/="           reduce using rule 20
	'>'            reduce using rule 20
	'<'            reduce using rule 20
	')'            reduce using rule 20
	':'            reduce using rule 20
	"++"           reduce using rule 20
	%eof           reduce using rule 20


State 65

	Form -> Form . '+' Form                             (rule 19)
	Form -> Form '+' Form .                             (rule 19)
	Form -> Form . '-' Form                             (rule 20)
	Form -> Form . '*' Form                             (rule 21)
	Form -> Form . '/' Form                             (rule 22)
	Form -> Form . '^' Form                             (rule 23)

	in             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	"&&"           reduce using rule 19
	"||"           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 36
	'/'            shift, and enter state 37
	'^'            shift, and enter state 38
	"=="           reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"/="           reduce using rule 19
	'>'            reduce using rule 19
	'<'            reduce using rule 19
	')'            reduce using rule 19
	':'            reduce using rule 19
	"++"           reduce using rule 19
	%eof           reduce using rule 19


State 66

	Expr -> letrec var '=' . Expr in Expr               (rule 2)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 77
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 67

	Expr -> if Expr then . Expr else Expr               (rule 4)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 76
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 68

	Juxt -> quot Atom Atom .                            (rule 26)

	int            reduce using rule 26
	float          reduce using rule 26
	bool           reduce using rule 26
	in             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	"&&"           reduce using rule 26
	"||"           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	"=="           reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"/="           reduce using rule 26
	'>'            reduce using rule 26
	'<'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	var            reduce using rule 26
	':'            reduce using rule 26
	"++"           reduce using rule 26
	%eof           reduce using rule 26


State 69

	Juxt -> rem Atom Atom .                             (rule 27)

	int            reduce using rule 27
	float          reduce using rule 27
	bool           reduce using rule 27
	in             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	"&&"           reduce using rule 27
	"||"           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	"=="           reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"/="           reduce using rule 27
	'>'            reduce using rule 27
	'<'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	var            reduce using rule 27
	':'            reduce using rule 27
	"++"           reduce using rule 27
	%eof           reduce using rule 27


State 70

	Expr -> '(' '\\' var . "->" Expr ')' "::" TypeExp "->" TypeExp    (rule 3)

	"->"           shift, and enter state 75


State 71

	Atom -> '(' Expr ')' .                              (rule 30)

	int            reduce using rule 30
	float          reduce using rule 30
	bool           reduce using rule 30
	in             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	"&&"           reduce using rule 30
	"||"           reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	"=="           reduce using rule 30
	">="           reduce using rule 30
	"<="           reduce using rule 30
	"/="           reduce using rule 30
	'>'            reduce using rule 30
	'<'            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	var            reduce using rule 30
	']'            reduce using rule 30
	':'            reduce using rule 30
	','            reduce using rule 30
	"++"           reduce using rule 30
	%eof           reduce using rule 30


State 72

	List -> '[' ListMembers ']' .                       (rule 43)

	in             reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	"&&"           reduce using rule 43
	"||"           reduce using rule 43
	"=="           reduce using rule 43
	">="           reduce using rule 43
	"<="           reduce using rule 43
	"/="           reduce using rule 43
	'>'            reduce using rule 43
	'<'            reduce using rule 43
	')'            reduce using rule 43
	':'            reduce using rule 43
	"++"           reduce using rule 43
	%eof           reduce using rule 43


State 73

	ListMembers -> Atom ',' . ListMembers               (rule 46)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	'('            shift, and enter state 25
	var            shift, and enter state 17
	']'            reduce using rule 44

	Atom           goto state 23
	ListMembers    goto state 74

State 74

	ListMembers -> Atom ',' ListMembers .               (rule 46)

	']'            reduce using rule 46


State 75

	Expr -> '(' '\\' var "->" . Expr ')' "::" TypeExp "->" TypeExp    (rule 3)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 82
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 76

	Expr -> if Expr then Expr . else Expr               (rule 4)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	else           shift, and enter state 81
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	':'            shift, and enter state 47
	"++"           shift, and enter state 48


State 77

	Expr -> letrec var '=' Expr . in Expr               (rule 2)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             shift, and enter state 80
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	':'            shift, and enter state 47
	"++"           shift, and enter state 48


State 78

	Expr -> let var '=' Expr . in Expr                  (rule 1)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             shift, and enter state 79
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	':'            shift, and enter state 47
	"++"           shift, and enter state 48


State 79

	Expr -> let var '=' Expr in . Expr                  (rule 1)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 86
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 80

	Expr -> letrec var '=' Expr in . Expr               (rule 2)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 85
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 81

	Expr -> if Expr then Expr else . Expr               (rule 4)

	int            shift, and enter state 8
	float          shift, and enter state 9
	bool           shift, and enter state 10
	let            shift, and enter state 2
	letrec         shift, and enter state 11
	if             shift, and enter state 12
	'-'            shift, and enter state 13
	quot           shift, and enter state 14
	rem            shift, and enter state 15
	'('            shift, and enter state 16
	var            shift, and enter state 17
	'['            shift, and enter state 18
	head           shift, and enter state 19
	tail           shift, and enter state 20

	Expr           goto state 84
	Form           goto state 4
	Juxt           goto state 5
	Atom           goto state 6
	List           goto state 7

State 82

	Expr -> '(' '\\' var "->" Expr . ')' "::" TypeExp "->" TypeExp    (rule 3)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            shift, and enter state 83
	':'            shift, and enter state 47
	"++"           shift, and enter state 48


State 83

	Expr -> '(' '\\' var "->" Expr ')' . "::" TypeExp "->" TypeExp    (rule 3)

	"::"           shift, and enter state 87


State 84

	Expr -> if Expr then Expr else Expr .               (rule 4)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 4
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           reduce using rule 4


State 85

	Expr -> letrec var '=' Expr in Expr .               (rule 2)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 2
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           reduce using rule 2


State 86

	Expr -> let var '=' Expr in Expr .                  (rule 1)
	Expr -> Expr . "==" Expr                            (rule 5)
	Expr -> Expr . ">=" Expr                            (rule 6)
	Expr -> Expr . "<=" Expr                            (rule 7)
	Expr -> Expr . "/=" Expr                            (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<' Expr                             (rule 10)
	Expr -> Expr . "&&" Expr                            (rule 11)
	Expr -> Expr . "||" Expr                            (rule 12)
	Expr -> Expr . ':' Expr                             (rule 13)
	Expr -> Expr . "++" Expr                            (rule 14)

	in             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	"&&"           shift, and enter state 39
	"||"           shift, and enter state 40
	"=="           shift, and enter state 41
	">="           shift, and enter state 42
	"<="           shift, and enter state 43
	"/="           shift, and enter state 44
	'>'            shift, and enter state 45
	'<'            shift, and enter state 46
	')'            reduce using rule 1
	':'            shift, and enter state 47
	"++"           shift, and enter state 48
	%eof           reduce using rule 1


State 87

	Expr -> '(' '\\' var "->" Expr ')' "::" . TypeExp "->" TypeExp    (rule 3)

	Int            shift, and enter state 90
	Bool           shift, and enter state 91
	Float          shift, and enter state 92
	'('            shift, and enter state 93
	'['            shift, and enter state 94

	TypeExp        goto state 88
	PrimType       goto state 89

State 88

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp . "->" TypeExp    (rule 3)
	TypeExp -> TypeExp . "->" TypeExp                   (rule 36)

	"->"           shift, and enter state 98


State 89

	TypeExp -> PrimType .                               (rule 35)

	in             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	"->"           reduce using rule 35
	"&&"           reduce using rule 35
	"||"           reduce using rule 35
	"=="           reduce using rule 35
	">="           reduce using rule 35
	"<="           reduce using rule 35
	"/="           reduce using rule 35
	'>'            reduce using rule 35
	'<'            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	':'            reduce using rule 35
	"++"           reduce using rule 35
	%eof           reduce using rule 35


State 90

	PrimType -> Int .                                   (rule 41)

	in             reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	"->"           reduce using rule 41
	"&&"           reduce using rule 41
	"||"           reduce using rule 41
	"=="           reduce using rule 41
	">="           reduce using rule 41
	"<="           reduce using rule 41
	"/="           reduce using rule 41
	'>'            reduce using rule 41
	'<'            reduce using rule 41
	')'            reduce using rule 41
	']'            reduce using rule 41
	':'            reduce using rule 41
	"++"           reduce using rule 41
	%eof           reduce using rule 41


State 91

	PrimType -> Bool .                                  (rule 40)

	in             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	"->"           reduce using rule 40
	"&&"           reduce using rule 40
	"||"           reduce using rule 40
	"=="           reduce using rule 40
	">="           reduce using rule 40
	"<="           reduce using rule 40
	"/="           reduce using rule 40
	'>'            reduce using rule 40
	'<'            reduce using rule 40
	')'            reduce using rule 40
	']'            reduce using rule 40
	':'            reduce using rule 40
	"++"           reduce using rule 40
	%eof           reduce using rule 40


State 92

	PrimType -> Float .                                 (rule 42)

	in             reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	"->"           reduce using rule 42
	"&&"           reduce using rule 42
	"||"           reduce using rule 42
	"=="           reduce using rule 42
	">="           reduce using rule 42
	"<="           reduce using rule 42
	"/="           reduce using rule 42
	'>'            reduce using rule 42
	'<'            reduce using rule 42
	')'            reduce using rule 42
	']'            reduce using rule 42
	':'            reduce using rule 42
	"++"           reduce using rule 42
	%eof           reduce using rule 42


State 93

	TypeExp -> '(' . TypeExp ')'                        (rule 37)

	Int            shift, and enter state 90
	Bool           shift, and enter state 91
	Float          shift, and enter state 92
	'('            shift, and enter state 93
	'['            shift, and enter state 94

	TypeExp        goto state 97
	PrimType       goto state 89

State 94

	TypeExp -> '[' . TypeExp ']'                        (rule 38)
	TypeExp -> '[' . ']'                                (rule 39)

	Int            shift, and enter state 90
	Bool           shift, and enter state 91
	Float          shift, and enter state 92
	'('            shift, and enter state 93
	'['            shift, and enter state 94
	']'            shift, and enter state 96

	TypeExp        goto state 95
	PrimType       goto state 89

State 95

	TypeExp -> TypeExp . "->" TypeExp                   (rule 36)
	TypeExp -> '[' TypeExp . ']'                        (rule 38)

	"->"           shift, and enter state 100
	']'            shift, and enter state 102


State 96

	TypeExp -> '[' ']' .                                (rule 39)

	in             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	"->"           reduce using rule 39
	"&&"           reduce using rule 39
	"||"           reduce using rule 39
	"=="           reduce using rule 39
	">="           reduce using rule 39
	"<="           reduce using rule 39
	"/="           reduce using rule 39
	'>'            reduce using rule 39
	'<'            reduce using rule 39
	')'            reduce using rule 39
	']'            reduce using rule 39
	':'            reduce using rule 39
	"++"           reduce using rule 39
	%eof           reduce using rule 39


State 97

	TypeExp -> TypeExp . "->" TypeExp                   (rule 36)
	TypeExp -> '(' TypeExp . ')'                        (rule 37)

	"->"           shift, and enter state 100
	')'            shift, and enter state 101


State 98

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" . TypeExp    (rule 3)
	TypeExp -> TypeExp "->" . TypeExp                   (rule 36)

	Int            shift, and enter state 90
	Bool           shift, and enter state 91
	Float          shift, and enter state 92
	'('            shift, and enter state 93
	'['            shift, and enter state 94

	TypeExp        goto state 99
	PrimType       goto state 89

State 99

	Expr -> '(' '\\' var "->" Expr ')' "::" TypeExp "->" TypeExp .    (rule 3)
	TypeExp -> TypeExp . "->" TypeExp                   (rule 36)
	TypeExp -> TypeExp "->" TypeExp .                   (rule 36)

	in             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	"->"           shift, and enter state 100
	"&&"           reduce using rule 3
	"||"           reduce using rule 3
	"=="           reduce using rule 3
	">="           reduce using rule 3
	"<="           reduce using rule 3
	"/="           reduce using rule 3
	'>'            reduce using rule 3
	'<'            reduce using rule 3
	')'            reduce using rule 3
	':'            reduce using rule 3
	"++"           reduce using rule 3
	%eof           reduce using rule 3


State 100

	TypeExp -> TypeExp "->" . TypeExp                   (rule 36)

	Int            shift, and enter state 90
	Bool           shift, and enter state 91
	Float          shift, and enter state 92
	'('            shift, and enter state 93
	'['            shift, and enter state 94

	TypeExp        goto state 103
	PrimType       goto state 89

State 101

	TypeExp -> '(' TypeExp ')' .                        (rule 37)

	in             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	"->"           reduce using rule 37
	"&&"           reduce using rule 37
	"||"           reduce using rule 37
	"=="           reduce using rule 37
	">="           reduce using rule 37
	"<="           reduce using rule 37
	"/="           reduce using rule 37
	'>'            reduce using rule 37
	'<'            reduce using rule 37
	')'            reduce using rule 37
	']'            reduce using rule 37
	':'            reduce using rule 37
	"++"           reduce using rule 37
	%eof           reduce using rule 37


State 102

	TypeExp -> '[' TypeExp ']' .                        (rule 38)

	in             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	"->"           reduce using rule 38
	"&&"           reduce using rule 38
	"||"           reduce using rule 38
	"=="           reduce using rule 38
	">="           reduce using rule 38
	"<="           reduce using rule 38
	"/="           reduce using rule 38
	'>'            reduce using rule 38
	'<'            reduce using rule 38
	')'            reduce using rule 38
	']'            reduce using rule 38
	':'            reduce using rule 38
	"++"           reduce using rule 38
	%eof           reduce using rule 38


State 103

	TypeExp -> TypeExp . "->" TypeExp                   (rule 36)
	TypeExp -> TypeExp "->" TypeExp .                   (rule 36)

	in             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	"->"           shift, and enter state 100
	"&&"           reduce using rule 36
	"||"           reduce using rule 36
	"=="           reduce using rule 36
	">="           reduce using rule 36
	"<="           reduce using rule 36
	"/="           reduce using rule 36
	'>'            reduce using rule 36
	'<'            reduce using rule 36
	')'            reduce using rule 36
	']'            reduce using rule 36
	':'            reduce using rule 36
	"++"           reduce using rule 36
	%eof           reduce using rule 36


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 47
Number of terminals: 41
Number of non-terminals: 9
Number of states: 104
